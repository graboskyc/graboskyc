@page "/pics";
@page "/photos";
@page "/ig";
@page "/pics/{PageNum}";
@layout AlbumLayout;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<PageTitle>Chris Grabosky's Photos</PageTitle>

<div class="mainheader">
    <div class="row py-lg-5">
      <div class="col-lg-6 col-md-8 mx-auto">
        <h1>Photos</h1>
        <p class="lead">An export of Chris Grabosky (graboskyc) Instagram profile</p>
        <p class="lead">
            <a href="/Home"><i class="cil-home" title="Home"></i></a>
            <a href="/Blog"><i class="cil-notes" title="Blog"></i></a>
        </p>
      </div>
    </div>
</div>

<div class="container">
  <div class="py-5 bg-light">
    <div class="container">

      <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @if(pics != null) {
                @foreach(var p in pics) {
                    <div class="col">
                        <a id="@p._id" name="@p._id"></a>
                        <div class="card shadow-sm" @onclick="@(e=>NavTo(p._id))">
                            <img src="https://gskywebstore.blob.core.windows.net/media/@p.path" />
                            <p style="text-align:center;padding:5px;"><span class="oi oi-calendar"></span> @p.taken_at</p>
                        </div>
                    </div>
                }
            }     
      </div>

      <div class="row">&nbsp;</div>

      <div class="row">
        <div class="col">
          <button class="btn btn-lg btn-gsky" style="margin:0px !important" @onclick=Advance>More Pics</button>
        </div>
      </div>

    </div>
  </div>
</div>

<a name="bottomscroller" id="bottomscroller"></a>

@code {
    private List<DataModels.IG> pics = null;
    private bool loginSuccess;
    [Parameter]
    public string PageNum {get;set;} = null;

    protected override async Task OnInitializedAsync()  {
      loginSuccess = await JSRuntime.InvokeAsync<bool>("login");

      string[] args = { };
      pics = await JSRuntime.InvokeAsync<List<DataModels.IG>>("realmShim_Function", "getPics", args);

      if (PageNum != null)
      {
        int pn = Convert.ToInt32(PageNum);
        while (pn > 1)
        {
          await More();
          pn--;
        }
        await JSRuntime.InvokeVoidAsync("BlazorScrollToId", "bottomscroller");
      }
      else
      {
        PageNum = "1";
      }


      StateHasChanged();
    }

    private async Task Advance() {
      await More();
      int newPage = Convert.ToInt32(PageNum) + 1;
      PageNum = newPage.ToString();
      NavigationManager.NavigateTo("/Pics/"+PageNum);

      int offsetScroll = (newPage-1)*12;
      if(offsetScroll < pics.Count) {
        await JSRuntime.InvokeVoidAsync("BlazorScrollToId", pics[offsetScroll]._id);
        await JSRuntime.InvokeVoidAsync("BlazorScrollToId", pics[offsetScroll]._id);
      } else {
        await JSRuntime.InvokeVoidAsync("BlazorScrollToId", "bottomscroller");
        await JSRuntime.InvokeVoidAsync("BlazorScrollToId", "bottomscroller");
      }
    }

    private async Task More() {
        string[] args = {pics.LastOrDefault()._id};
        List<DataModels.IG> newPics = await JSRuntime.InvokeAsync<List<DataModels.IG>>("realmShim_Function", "getPics", args);
        pics.AddRange(newPics);
        StateHasChanged();
    }

    private async Task NavTo(string id) {
        NavigationManager.NavigateTo("/Pic/"+@id);
    }
}